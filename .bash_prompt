#!/bin/bash

prompt_git() {
	local s=''
	local branchName=''

    # return if `git` is not available
	if ! command -v git >/dev/null 2>&1; then
	  return
	fi

	# Check if the current directory is in a Git repository.
	if [ "$(git rev-parse --is-inside-work-tree &>/dev/null; echo "${?}")" == '0' ]; then

		# check if the current directory is in .git before running git checks
		if [ "$(git rev-parse --is-inside-git-dir 2> /dev/null)" == 'false' ]; then

			if [[ -O "$(git rev-parse --show-toplevel)/.git/index" ]]; then
				git update-index --really-refresh -q &> /dev/null
			fi

			# Check for uncommitted changes in the index.
			if ! git diff --quiet --ignore-submodules --cached; then
				s+='+'
			fi

			# Check for unstaged changes.
			if ! git diff-files --quiet --ignore-submodules --; then
				s+='!'
			fi

			# Check for untracked files.
			if [ -n "$(git ls-files --others --exclude-standard)" ]; then
				s+='?'
			fi

			# Check for stashed files.
			if git rev-parse --verify refs/stash &>/dev/null; then
				s+='$'
			fi

		fi

		# Get the short symbolic ref.
		# If HEAD isn’t a symbolic ref, get the short SHA for the latest commit
		# Otherwise, just give up.
		branchName="$(git symbolic-ref --quiet --short HEAD 2> /dev/null || \
			git rev-parse --short HEAD 2> /dev/null || \
			echo '(unknown)')"

		[ -n "${s}" ] && s=" [${s}]"

		echo "${PINK}${branchName}${PURPLE_2}${s}"
	else
		return
	fi
}

prompt_virtualenv() {
    # If not in a virtualenv, print nothing
    [[ "$VIRTUAL_ENV" == "" ]] && return

    # Distinguish between the shell where the virtualenv was activated
    # and its children
    local venv_name="${VIRTUAL_ENV##*/}"
    if typeset -f deactivate >/dev/null; then
        echo "${WHITE}🐍[${RED}${venv_name}${WHITE}]${CLEAR} "
    else
        echo "${WHITE}🐍<${RED}${venv_name}${WHITE}>${CLEAR} "
    fi
}


prompt_kubectl() {
  local kubectl_context

  # return if `kubectl` is not available
  if ! command -v kubectl >/dev/null 2>&1; then
    return
  fi

  if kubectl_context=$(kubectl config current-context 2> /dev/null); then
    echo "${WHITE}⎈(${BLUE}${kubectl_context}${WHITE})${CLEAR} "
  fi
}

# Disable native virtualenv prompt
VIRTUAL_ENV_DISABLE_PROMPT=1

PURPLE="$(tput setaf 105)"    # username
ORANGE="$(tput setaf 214)"    # hostname
WHITE="$(tput setaf 15)"      # prepositions
MAGENTA="$(tput setaf 36)"    # path
PINK=$(tput setaf 219)        # git branch
PURPLE_2="$(tput setaf 183)"  # git status
RED="$(tput setaf 193)"       # virtualenv prompt
BLUE="$(tput setaf 33)"       # kubectl context
CLEAR="$(tput sgr0)"          # unset color

PS1="\[\e]0;\]\w\a";                      # terminal title
PS1+="\[${PURPLE}\]\u\[${CLEAR}\] "       # username
PS1+="\[${WHITE}\]at\[${CLEAR}\] "        # 'at'
PS1+="\[${ORANGE}\]\h\[${CLEAR}\] "       # host
PS1+="\[${WHITE}\]in\[${CLEAR}\] "        # 'in'
PS1+="\[${MAGENTA}\]\w\[${CLEAR}\] "      # working directory
PS1+="\$(prompt_virtualenv)\[${CLEAR}\]"  # virtualenv prompt
PS1+="\$(prompt_kubectl)\[${CLEAR}\]"     # kubectl context
PS1+="\$(prompt_git)\[${CLEAR}\]"         # git repository details
PS1+="\n"                                 # newline
PS1+="\[${WHITE}\]\$ \[${CLEAR}\]"        # '$'

if [ "$TERM" = "dumb" ]; then
	export PS1="> "
else
	export PS1;
fi
